Новое в Java8:

Default методы в интерфейсах.
Default метод - это метод в интерфейсе с реализованной логикой, который не требуется обязательно определять в реализации этого интерфейса.
В предыдущих версиях JDK добавлять методы в интерфейсы стандартных библиотек не представлялось возможным, это разрушило бы весь пользовательский код, ведь для каждой реализации интерфейса пришлось бы дописывать реализацию недостающего нового метода. В Java 8 стандартные интерфейсы расширены большим количеством default методов.

Функциональные интерфейсы.
Функциональный интерфейс - это тот интерфейс, который определяет только один абстрактный метод, как, например, java.lang.Runnable:
Чтобы точно определить интерфейс как функциональный, добавлена аннотация @FunctionalInterface, работающая по принципу @Override. Она обозначит замысел и не даст определить второй абстрактный метод в интерфейсе.
Заметим, интерфейс может включать сколько угодно default методов и при этом оставаться функциональным, потому что default методы - не абстрактные.

Лямбда-выражения
Самое значимое нововведение в Java 8 - это лямбда-выражения. Если сказать вообщем, то под ними понимаются анонимные методы, которые при этом еще представляют из себя объект, который можно присваивать переменной и передавать как аргумент в другие методы.

В новой версии также введен особый синтаксис ссылок на методы, который по сути - сокращенная форма некоторых лямбда-выражений:

Ссылка и соответствующее лямбда-выражение
String::valueOf       x -> String.valueOf(x)
Object::toString      x -> x.toString()
x::toString              () -> x.toString()
ArrayList::new        () -> new ArrayList<>()

java.util.function
Еще одно нововведение JDK - множество функциональных интерфейсов, которые будут весьма полезны. Рассмотрим некоторые из них:
Function<T, R> - интерфейс, с помощью которого реализуется функция, получающая на ввод экземпляр класса T и возвращающая на выходе экземпляр класса R. Далее не настолько подробно.
Predicate<T> - на ввод - T, возвращает результат типа boolean.
Consumer<T> - на ввод - T, производит некое действие и ничего не возвращает.
Supplier<T> - ничего не принимает на ввод, возвращает T
BinaryOperator<T> - на ввод - два экземпляра T, возвращает один T

Пакет также снабжен примитивными реализациями данных интерфейсов для типов int, long и double.

java.util.stream
java.util.stream введен для поддержки распараллеливания вычислений в потоках. Теперь потоки делятся на последовательные и параллельные. Самая большая польза от этого - в работе с коллекциями. Stream снабжен гибким API для преобразования данных и оперирования над ними.

java.time
Если вы знакомы с Joda Time, то освоить новое API будет очень легко. Почти все в java.time является immutable. В отличие от старого API даты/времени, такие величины как месяцы и дни недели реализованы через enum. 
Основные классы java.time:
* LocalDateTime, LocalDate, LocalTime - представления даты и времени. Время хранится с точностью до наносекунды, так что в LocalTime можно хранить, например, величину "13:45.30.123456789". Есть множество удобных методов, таких как plusMinutes, plusHours, isAfter, toSecondOfDay и т.д.
* Year, Month, YearMonth, MonthDay, DayOfWeek - типы, связанные с датами, получили больший диапазон. Так, величина Year может быть от "-999,999,999" до "+999,999,999"
* Instant - почти тоже самое, что и java.util.Date, только основой исчисления служат величина long для количества секунд, прошедших с полуночи 1 января 1970, и int - для наносекунд в текущей секунде.
* Duration, Period - полезны, когда нужно выразить данные как "3 года, 2 месяца и 18 дней" или "3 часа, 45 минут и 8 секунд"

Осонвные отличия последних версий Java:
Java 9:
JShell
Неизменяемые объекты List Set Map из коробки
Private методы в интерфейсах
Java 10: 
Вывод типа локальной переменной: улучшает язык Java, позволяя сократить объявление переменной до ключевого слова var.
Parallel Full GC для G1: усовершенствованный сборщик мусора.
Application Class-Data Sharing: ряд наработок, позволяющих классам приложений размещаться в одном архиве.
Экспериментальный JIT-компилятор на базе Java: новый JIT-компилятор Java VM.

Java 11:
[323] Local-Variable Syntax for Lambda Parameters — var-синтаксис для лямбда-параметров 

В Java 10 ввели ключевое слово var, которое позволяло не указывать явно тип локальной переменной.
Большое количество новых API в JDK 11 появилось благодаря включению в стандарт языка модуля HTTP Client и Flight Recorder. С полным списком API можно ознакомиться в следующем полном и обстоятельном сравнении разных версий JDK, составленном Гуннаром Морлингом. А в этой заметке перечислим некоторые новые методы, которые не входят в модули java.net.http, jdk.jfr и java.security. 

java.lang.String

Возможно, изменение в String — одно из самых важных в API JDK 11. Здесь есть несколько полезных новых методов.
boolean isBlank (): возвращает true, если строка пуста или содержит только пробелы, иначе false.
Stream lines(): возвращает поток строк, извлеченных из этой строки, разделенных терминаторами строк.
String repeat (int): возвращает строку, значение которой представляет собой конкатенацию этой строки, повторяющуюся int раз.
String strip (): Возвращает строку, из которой удалены все пробелы, которые находятся до первого символа, не являющегося пробелом, или после последнего.
String stripLeading (): Возвращает строку, из которой удалены все пробелы, которые находятся до первого символа, не являющегося пробелом.
String stripTrainling (): Возвращает строку, из которой удалены все пробелы, которые находятся после последнего символа, не являющегося пробелом.

Java 12:
325: Switch Expressions (Preview)

Новая форма написания выражения с оператором switch. На странице фичи приводится пример кода с традиционным использованием switch, где постоянное использование break делает его излишне многословным, что приводит к частым случайным ошибкам. 